(function(e) {
  if ('object' == typeof exports && 'undefined' != typeof module) module.exports = e();
  else if ('function' == typeof define && define.amd) define([], e);
  else {
    var t;
    (t =
      'undefined' == typeof window
        ? 'undefined' == typeof global ? ('undefined' == typeof self ? this : self) : global
        : window),
      (t.Promise = e());
  }
})(function() {
  return (function() {
    function _(c, e, t) {
      function l(i, s) {
        if (!e[i]) {
          if (!c[i]) {
            var o = 'function' == typeof require && require;
            if (!s && o) return o(i, !0);
            if (r) return r(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw ((a.code = 'MODULE_NOT_FOUND'), a);
          }
          var n = (e[i] = { exports: {} });
          c[i][0].call(
            n.exports,
            function(t) {
              var e = c[i][1][t];
              return l(e ? e : t);
            },
            n,
            n.exports,
            _,
            c,
            e,
            t
          );
        }
        return e[i].exports;
      }
      for (var r = 'function' == typeof require && require, i = 0; i < t.length; i++) l(t[i]);
      return l;
    }
    return _;
  })()(
    {
      1: [
        function(e, t) {
          'use strict';
          e('setimmediate'), (t.exports = e('./lib/aigle'));
        },
        { './lib/aigle': 2, setimmediate: 82 }
      ],
      2: [
        function(e, t) {
          (function(l) {
            'use strict';
            function r(e) {
              if (e instanceof u) return e;
              const t = new E(v);
              return k(t, e), t;
            }
            function i(t) {
              f && qt(this);
              try {
                t(
                  e => {
                    void 0 === t || ((t = void 0), k(this, e));
                  },
                  e => {
                    void 0 === t || ((t = void 0), this._reject(e));
                  }
                );
              } catch (l) {
                if (t === void 0) return;
                (t = void 0), this._reject(l);
              }
            }
            function s(t) {
              f && qt(this);
              try {
                t(
                  e => {
                    void 0 === t ||
                      (e instanceof E && 0 === e._resolved && (this._parent = e), (t = void 0), k(this, e));
                  },
                  e => {
                    void 0 === t || ((t = void 0), this._reject(e));
                  },
                  e => {
                    if ('function' != typeof e) throw new TypeError('onCancel must be function');
                    0 !== this._resolved ||
                      (void 0 === this._onCancelQueue && (this._onCancelQueue = new p()), this._onCancelQueue.push(e));
                  }
                );
              } catch (l) {
                if (t === void 0) return;
                (t = void 0), this._reject(l);
              }
            }
            function _(e, t) {
              return r => {
                for (let i = e.length; i--; ) {
                  const l = e[i];
                  if (l === Error || l.prototype instanceof Error) {
                    if (r instanceof l) return t(r);
                  } else if (l(r)) return t(r);
                }
                return (g.e = r), g;
              };
            }
            function o(e, t) {
              return () => {
                const { _resolved: l, _value: r } = e,
                  i = R(t);
                if (i === g) return i;
                if (i instanceof u)
                  switch (i._resolved) {
                    case 1:
                      return (i._value = r), i;
                    case 2:
                      return i;
                  }
                const s = new E(v);
                return (
                  i && i.then
                    ? 1 === l
                      ? i.then(() => s._resolve(r), e => s._reject(e))
                      : i.then(() => s._reject(r), e => s._reject(e))
                    : ((s._resolved = l), (s._value = r)),
                  s
                );
              };
            }
            function a(e, t, l, r) {
              return (
                f && qt(t, e),
                void 0 === e._receiver || e._receiver === v
                  ? (0 !== e._resolved && d(e), (e._receiver = t), (e._onFulfilled = l), (e._onRejected = r))
                  : e._receiver === x
                    ? ((e._receiver = t), (e._onFulfilled = l), (e._onRejected = r))
                    : (!e._receivers && (e._receivers = new p()),
                      e._receivers.push({ receiver: t, onFulfilled: l, onRejected: r })),
                t
              );
            }
            function c(e, t) {
              return f && qt(t, e), 0 !== e._resolved && d(e), (e._receiver = t), t._promise;
            }
            function n(e, t, l, r, i) {
              if (f) {
                f = !1;
                const s = n(e, t, l, r, i);
                return (f = !0), qt(s, e), s;
              }
              switch (e._resolved) {
                case 0:
                  const s = new t(h, l, r, i);
                  return (
                    void 0 === e._receiver
                      ? (e._receiver = s)
                      : (!e._receivers && (e._receivers = new p()), e._receivers.push({ receiver: s })),
                    s._promise
                  );
                case 1:
                  return new t(e._value, l, r, i)._execute();
                case 2:
                  return E.reject(e._value);
              }
            }
            const { AigleCore: u, AigleProxy: m } = e('aigle-core'),
              p = e('./internal/queue'),
              d = e('./internal/async'),
              {
                VERSION: y,
                INTERNAL: v,
                PENDING: h,
                UNHANDLED: x,
                errorObj: g,
                call0: R,
                callResolve: S,
                callReject: L,
                callReceiver: k
              } = e('./internal/util');
            let f = !1;
            class E extends u {
              constructor(e) {
                super(),
                  (this._resolved = 0),
                  (this._value = void 0),
                  (this._key = void 0),
                  (this._receiver = void 0),
                  (this._onFulfilled = void 0),
                  (this._onRejected = void 0),
                  (this._receivers = void 0);
                e === v || this._execute(e);
              }
              then(e, t) {
                return a(this, new E(v), e, t);
              }
              catch(e) {
                if (1 < arguments.length) {
                  let t = arguments.length;
                  if (((e = arguments[--t]), 'function' == typeof e)) {
                    const l = Array(t);
                    for (; t--; ) l[t] = arguments[t];
                    e = _(l, e);
                  }
                }
                return a(this, new E(v), void 0, e);
              }
              finally(e) {
                return (e = 'function' == typeof e ? o(this, e) : e), a(this, new E(v), e, e);
              }
              toString() {
                return '[object Promise]';
              }
              isPending() {
                return 0 === this._resolved;
              }
              isFulfilled() {
                return 1 === this._resolved;
              }
              isRejected() {
                return 2 === this._resolved;
              }
              isCancelled() {
                return this._value instanceof Yt;
              }
              value() {
                return 1 === this._resolved ? this._value : void 0;
              }
              reason() {
                return 2 === this._resolved ? this._value : void 0;
              }
              cancel() {
                if (this._execute !== i && 0 === this._resolved) {
                  const { _onCancelQueue: e } = this;
                  if (e) {
                    let t = -1;
                    const { array: l } = e;
                    for (this._onCancelQueue = void 0; ++t < e.length; ) l[t]();
                  }
                  (this._resolved = 2),
                    (this._value = new Yt('late cancellation observer')),
                    this._parent && this._parent.cancel();
                }
              }
              suppressUnhandledRejections() {
                this._receiver = v;
              }
              spread(e) {
                return c(this, new jt(e));
              }
              all() {
                return n(this, N);
              }
              race() {
                return n(this, P);
              }
              props() {
                return n(this, b);
              }
              parallel() {
                return n(this, F);
              }
              each(e) {
                return n(this, O, e);
              }
              forEach(e) {
                return n(this, O, e);
              }
              eachSeries(e) {
                return n(this, z, e);
              }
              forEachSeries(e) {
                return n(this, z, e);
              }
              eachLimit(e, t) {
                return n(this, w, e, t);
              }
              forEachLimit(e, t) {
                return n(this, w, e, t);
              }
              map(e) {
                return n(this, G, e);
              }
              mapSeries(e) {
                return n(this, W, e);
              }
              mapLimit(e, t) {
                return n(this, Q, e, t);
              }
              mapValues(e) {
                return n(this, H, e);
              }
              mapValuesSeries(e) {
                return n(this, Y, e);
              }
              mapValuesLimit(e, t) {
                return n(this, X, e, t);
              }
              filter(e) {
                return n(this, ee, e);
              }
              filterSeries(e) {
                return n(this, le, e);
              }
              filterLimit(e, t) {
                return n(this, ie, e, t);
              }
              reject(e) {
                return n(this, _e, e);
              }
              rejectSeries(e) {
                return n(this, ae, e);
              }
              rejectLimit(e, t) {
                return n(this, ne, e, t);
              }
              find(e) {
                return n(this, me, e);
              }
              findSeries(e) {
                return n(this, de, e);
              }
              findLimit(e, t) {
                return n(this, ve, e, t);
              }
              findIndex(e) {
                return n(this, xe, e);
              }
              findIndexSeries(e) {
                return n(this, Re, e);
              }
              findIndexLimit(e, t) {
                return n(this, Le, e, t);
              }
              findKey(e) {
                return n(this, fe, e);
              }
              findKeySeries(e) {
                return n(this, je, e);
              }
              findKeyLimit(e, t) {
                return n(this, Ae, e, t);
              }
              pick(e) {
                return n(this, Pe, e);
              }
              pickSeries(e) {
                return n(this, be, e);
              }
              pickLimit(e, t) {
                return n(this, Fe, e, t);
              }
              pickBy(e) {
                return n(this, Pe, e);
              }
              pickBySeries(e) {
                return n(this, be, e);
              }
              pickByLimit(e, t) {
                return n(this, Fe, e, t);
              }
              omit(e) {
                return n(this, Oe, e);
              }
              omitSeries(e) {
                return n(this, ze, e);
              }
              omitLimit(e, t) {
                return n(this, we, e, t);
              }
              reduce(e, t) {
                return n(this, Ge, e, t);
              }
              transform(e, t) {
                return n(this, We, e, t);
              }
              transformSeries(e, t) {
                return n(this, Qe, e, t);
              }
              transformLimit(e, t, l) {
                return n(this, He, e, t, l);
              }
              sortBy(e) {
                return n(this, Ye, e);
              }
              sortBySeries(e) {
                return n(this, Xe, e);
              }
              sortByLimit(e, t) {
                return n(this, et, e, t);
              }
              some(e) {
                return n(this, lt, e);
              }
              someSeries(e) {
                return n(this, it, e);
              }
              someLimit(e, t) {
                return n(this, _t, e, t);
              }
              every(e) {
                return n(this, at, e);
              }
              everySeries(e) {
                return n(this, nt, e);
              }
              everyLimit(e, t) {
                return n(this, mt, e, t);
              }
              concat(e) {
                return n(this, dt, e);
              }
              concatSeries(e) {
                return n(this, vt, e);
              }
              concatLimit(e, t) {
                return n(this, xt, e, t);
              }
              groupBy(e) {
                return n(this, Rt, e);
              }
              groupBySeries(e) {
                return n(this, Lt, e);
              }
              groupByLimit(e, t) {
                return n(this, ft, e, t);
              }
              delay(e) {
                return a(this, new Pt(e));
              }
              timeout(e, t) {
                return c(this, new Tt(e, t));
              }
              whilst(e, t) {
                return this.then(l => bt(l, e, t));
              }
              doWhilst(e, t) {
                return this.then(l => Bt(l, e, t));
              }
              until(e, t) {
                return this.then(l => Ft(l, e, t));
              }
              doUntil(e, t) {
                return this.then(l => Dt(l, e, t));
              }
              thru(e) {
                return this.then(t => Mt(t, e));
              }
              tap(e) {
                return this.then(t => zt(t, e));
              }
              times(e) {
                return n(this, wt, e);
              }
              timesSeries(e) {
                return n(this, Gt, e);
              }
              timesLimit(e, t) {
                return n(this, Wt, e, t);
              }
              disposer(e) {
                return new Qt(this, e);
              }
              _resolve(e) {
                0 === this._resolved &&
                  ((this._resolved = 1), (this._value = e), void 0 === this._receiver || this._callResolve());
              }
              _callResolve() {
                const { _receiver: e } = this;
                if (
                  ((this._receiver = void 0),
                  e instanceof m
                    ? e._callResolve(this._value, this._key)
                    : this._key === v ? e._resolve(this._value) : S(e, this._onFulfilled, this._value),
                  !!this._receivers)
                ) {
                  const { _value: e, _key: t, _receivers: l } = this;
                  this._receivers = void 0;
                  let r = -1;
                  const { array: i } = l;
                  for (; ++r < l.length; ) {
                    const { receiver: l, onFulfilled: s } = i[r];
                    l instanceof m ? l._callResolve(e, t) : S(l, s, e);
                  }
                }
              }
              _reject(e) {
                if (0 === this._resolved)
                  return (
                    (this._resolved = 2),
                    (this._value = e),
                    void 0 === this._receiver
                      ? ((this._receiver = x), void d(this))
                      : void (f && Ht(this), this._callReject())
                  );
              }
              _callReject() {
                const { _receiver: e } = this;
                if (((this._receiver = void 0), void 0 === e || e === x))
                  return void l.emit('unhandledRejection', this._value);
                if (
                  e !== v &&
                  (e instanceof m
                    ? e._callReject(this._value)
                    : this._key === v ? e._reject(this._value) : L(e, this._onRejected, this._value),
                  !!this._receivers)
                ) {
                  const { _value: e, _receivers: t } = this;
                  this._receivers = void 0;
                  let l = -1;
                  const { array: r } = t;
                  for (; ++l < t.length; ) {
                    const { receiver: t, onRejected: i } = r[l];
                    t instanceof m ? t._callReject(e) : L(t, i, e);
                  }
                }
              }
              _addReceiver(e, t) {
                (this._key = t), (this._receiver = e);
              }
            }
            (E.prototype._execute = i), (t.exports = E), (t.exports.default = E);
            const { all: j, All: N } = e('./all'),
              A = e('./attempt'),
              { race: I, Race: P } = e('./race'),
              { props: T, Props: b } = e('./props'),
              { parallel: B, Parallel: F } = e('./parallel'),
              { each: D, Each: O } = e('./each'),
              { eachSeries: M, EachSeries: z } = e('./eachSeries'),
              { eachLimit: V, EachLimit: w } = e('./eachLimit'),
              { map: C, Map: G } = e('./map'),
              { mapSeries: K, MapSeries: W } = e('./mapSeries'),
              { mapLimit: U, MapLimit: Q } = e('./mapLimit'),
              { mapValues: q, MapValues: H } = e('./mapValues'),
              { mapValuesSeries: $, MapValuesSeries: Y } = e('./mapValuesSeries'),
              { mapValuesLimit: J, MapValuesLimit: X } = e('./mapValuesLimit'),
              { filter: Z, Filter: ee } = e('./filter'),
              { filterSeries: te, FilterSeries: le } = e('./filterSeries'),
              { filterLimit: re, FilterLimit: ie } = e('./filterLimit'),
              { reject: se, Reject: _e } = e('./reject'),
              { rejectSeries: oe, RejectSeries: ae } = e('./rejectSeries'),
              { rejectLimit: ce, RejectLimit: ne } = e('./rejectLimit'),
              { find: ue, Find: me } = e('./find'),
              { findSeries: pe, FindSeries: de } = e('./findSeries'),
              { findLimit: ye, FindLimit: ve } = e('./findLimit'),
              { findIndex: he, FindIndex: xe } = e('./findIndex'),
              { findIndexSeries: ge, FindIndexSeries: Re } = e('./findIndexSeries'),
              { findIndexLimit: Se, FindIndexLimit: Le } = e('./findIndexLimit'),
              { findKey: ke, FindKey: fe } = e('./findKey'),
              { findKeySeries: Ee, FindKeySeries: je } = e('./findKeySeries'),
              { findKeyLimit: Ne, FindKeyLimit: Ae } = e('./findKeyLimit'),
              { pickBy: Ie, PickBy: Pe } = e('./pickBy'),
              { pickBySeries: Te, PickBySeries: be } = e('./pickBySeries'),
              { pickByLimit: Be, PickByLimit: Fe } = e('./pickByLimit'),
              { omit: De, Omit: Oe } = e('./omit'),
              { omitSeries: Me, OmitSeries: ze } = e('./omitSeries'),
              { omitLimit: Ve, OmitLimit: we } = e('./omitLimit'),
              { reduce: Ce, Reduce: Ge } = e('./reduce'),
              { transform: Ke, Transform: We } = e('./transform'),
              { transformSeries: Ue, TransformSeries: Qe } = e('./transformSeries'),
              { transformLimit: qe, TransformLimit: He } = e('./transformLimit'),
              { sortBy: $e, SortBy: Ye } = e('./sortBy'),
              { sortBySeries: Je, SortBySeries: Xe } = e('./sortBySeries'),
              { sortByLimit: Ze, SortByLimit: et } = e('./sortByLimit'),
              { some: tt, Some: lt } = e('./some'),
              { someSeries: rt, SomeSeries: it } = e('./someSeries'),
              { someLimit: st, SomeLimit: _t } = e('./someLimit'),
              { every: ot, Every: at } = e('./every'),
              { everySeries: ct, EverySeries: nt } = e('./everySeries'),
              { everyLimit: ut, EveryLimit: mt } = e('./everyLimit'),
              { concat: pt, Concat: dt } = e('./concat'),
              { concatSeries: yt, ConcatSeries: vt } = e('./concatSeries'),
              { concatLimit: ht, ConcatLimit: xt } = e('./concatLimit'),
              { groupBy: gt, GroupBy: Rt } = e('./groupBy'),
              { groupBySeries: St, GroupBySeries: Lt } = e('./groupBySeries'),
              { groupByLimit: kt, GroupByLimit: ft } = e('./groupByLimit'),
              { join: Et, Spread: jt } = e('./join'),
              Nt = e('./promisify'),
              At = e('./promisifyAll'),
              { delay: It, Delay: Pt } = e('./delay'),
              Tt = e('./timeout'),
              { whilst: bt } = e('./whilst'),
              { doWhilst: Bt } = e('./doWhilst'),
              { until: Ft } = e('./until'),
              Dt = e('./doUntil'),
              Ot = e('./retry'),
              Mt = e('./thru'),
              zt = e('./tap'),
              { times: Vt, Times: wt } = e('./times'),
              { timesSeries: Ct, TimesSeries: Gt } = e('./timesSeries'),
              { timesLimit: Kt, TimesLimit: Wt } = e('./timesLimit'),
              { using: Ut, Disposer: Qt } = e('./using'),
              { resolveStack: qt, reconstructStack: Ht } = e('./debug'),
              { createProxy: $t } = e('./internal/mixin');
            (E.VERSION = y),
              (E.resolve = r),
              (E.reject = function(e, t) {
                if (2 === arguments.length && 'function' == typeof t) return se(e, t);
                const l = new E(v);
                return l._reject(e), l;
              }),
              (E.all = j),
              (E.race = I),
              (E.props = T),
              (E.parallel = B),
              (E.each = D),
              (E.eachSeries = M),
              (E.eachLimit = V),
              (E.forEach = D),
              (E.forEachSeries = M),
              (E.forEachLimit = V),
              (E.map = C),
              (E.mapSeries = K),
              (E.mapLimit = U),
              (E.mapValues = q),
              (E.mapValuesSeries = $),
              (E.mapValuesLimit = J),
              (E.filter = Z),
              (E.filterSeries = te),
              (E.filterLimit = re),
              (E.rejectSeries = oe),
              (E.rejectLimit = ce),
              (E.find = ue),
              (E.findSeries = pe),
              (E.findLimit = ye),
              (E.findIndex = he),
              (E.findIndexSeries = ge),
              (E.findIndexLimit = Se),
              (E.findKey = ke),
              (E.findKeySeries = Ee),
              (E.findKeyLimit = Ne),
              (E.detect = ue),
              (E.detectSeries = pe),
              (E.detectLimit = ye),
              (E.pick = Ie),
              (E.pickSeries = Te),
              (E.pickLimit = Be),
              (E.pickBy = Ie),
              (E.pickBySeries = Te),
              (E.pickByLimit = Be),
              (E.omit = De),
              (E.omitSeries = Me),
              (E.omitLimit = Ve),
              (E.reduce = Ce),
              (E.transform = Ke),
              (E.transformSeries = Ue),
              (E.transformLimit = qe),
              (E.sortBy = $e),
              (E.sortBySeries = Je),
              (E.sortByLimit = Ze),
              (E.some = tt),
              (E.someSeries = rt),
              (E.someLimit = st),
              (E.every = ot),
              (E.everySeries = ct),
              (E.everyLimit = ut),
              (E.concat = pt),
              (E.concatSeries = yt),
              (E.concatLimit = ht),
              (E.groupBy = gt),
              (E.groupBySeries = St),
              (E.groupByLimit = kt),
              (E.attempt = A),
              (E.try = A),
              (E.join = Et),
              (E.promisify = Nt),
              (E.promisifyAll = At),
              (E.delay = It),
              (E.whilst = bt),
              (E.doWhilst = Bt),
              (E.until = Ft),
              (E.doUntil = Dt),
              (E.retry = Ot),
              (E.thru = Mt),
              (E.tap = zt),
              (E.times = Vt),
              (E.timesSeries = Ct),
              (E.timesLimit = Kt),
              (E.using = Ut),
              (E.mixin = function(e, t = {}) {
                const { override: l, promisify: i = !0 } = t;
                return (
                  Object.getOwnPropertyNames(e).forEach(t => {
                    const s = e[t];
                    if ('function' != typeof s || (E[t] && !l)) return;
                    if ('chain' === t) {
                      const e = s();
                      if (e && e.__chain__)
                        return (
                          (E.chain = r),
                          void (E.prototype.value = function() {
                            return this;
                          })
                        );
                    }
                    const _ = $t(s, i);
                    (E[t] = function(e, t, l, r) {
                      return new _(e, t, l, r)._execute();
                    }),
                      (E.prototype[t] = function(e, t, l) {
                        return n(this, _, e, t, l);
                      });
                  }),
                  E
                );
              }),
              (E.config = function(e) {
                (e = e || {}),
                  e.longStackTraces !== void 0 && (f = !!e.longStackTraces),
                  e.cancellation !== void 0 && (E.prototype._execute = e.cancellation ? s : i);
              }),
              (E.longStackTraces = function() {
                f = !0;
              });
            const { CancellationError: Yt, TimeoutError: Jt } = e('./error');
            (E.CancellationError = Yt), (E.TimeoutError = Jt);
          }.call(this, e('_process')));
        },
        {
          './all': 3,
          './attempt': 4,
          './concat': 5,
          './concatLimit': 6,
          './concatSeries': 7,
          './debug': 8,
          './delay': 9,
          './doUntil': 10,
          './doWhilst': 11,
          './each': 12,
          './eachLimit': 13,
          './eachSeries': 14,
          './error': 15,
          './every': 16,
          './everyLimit': 17,
          './everySeries': 18,
          './filter': 19,
          './filterLimit': 20,
          './filterSeries': 21,
          './find': 22,
          './findIndex': 23,
          './findIndexLimit': 24,
          './findIndexSeries': 25,
          './findKey': 26,
          './findKeyLimit': 27,
          './findKeySeries': 28,
          './findLimit': 29,
          './findSeries': 30,
          './groupBy': 31,
          './groupByLimit': 32,
          './groupBySeries': 33,
          './internal/async': 34,
          './internal/mixin': 36,
          './internal/queue': 37,
          './internal/util': 38,
          './join': 39,
          './map': 40,
          './mapLimit': 41,
          './mapSeries': 42,
          './mapValues': 43,
          './mapValuesLimit': 44,
          './mapValuesSeries': 45,
          './omit': 46,
          './omitLimit': 47,
          './omitSeries': 48,
          './parallel': 49,
          './pickBy': 50,
          './pickByLimit': 51,
          './pickBySeries': 52,
          './promisify': 53,
          './promisifyAll': 54,
          './props': 55,
          './race': 56,
          './reduce': 57,
          './reject': 58,
          './rejectLimit': 59,
          './rejectSeries': 60,
          './retry': 61,
          './some': 62,
          './someLimit': 63,
          './someSeries': 64,
          './sortBy': 65,
          './sortByLimit': 66,
          './sortBySeries': 67,
          './tap': 68,
          './thru': 69,
          './timeout': 70,
          './times': 71,
          './timesLimit': 72,
          './timesSeries': 73,
          './transform': 74,
          './transformLimit': 75,
          './transformSeries': 76,
          './until': 77,
          './using': 78,
          './whilst': 79,
          _process: 81,
          'aigle-core': 80
        }
      ],
      3: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            { INTERNAL: i, PENDING: s, promiseArrayEach: _, promiseSetEach: o } = e('./internal/util'),
            { callResolve: a } = e('./props');
          class c extends l {
            constructor(e) {
              super(),
                (this._promise = new r(i)),
                (this._rest = void 0),
                (this._coll = void 0),
                (this._result = void 0),
                e === s ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (Array.isArray(e)) {
                const t = e.length;
                (this._rest = t), (this._coll = e), (this._result = Array(t)), (this._callResolve = a), _(this);
              } else if (e instanceof Set) {
                const { size: t } = e;
                (this._rest = t), (this._coll = e), (this._result = Array(t)), (this._callResolve = a), o(this);
              } else (this._rest = 0), (this._result = []);
              return 0 === this._rest && this._promise._resolve(this._result), this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            all: function(e) {
              return new c(e)._promise;
            },
            All: c
          };
        },
        { './aigle': 2, './internal/util': 38, './props': 55, 'aigle-core': 80 }
      ],
      4: [
        function(e, t) {
          'use strict';
          const l = e('./aigle'),
            { INTERNAL: r, callResolve: i } = e('./internal/util');
          t.exports = function(e) {
            const t = new l(r);
            return i(t, e), t;
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      5: [
        function(e, t) {
          'use strict';
          function l(e) {
            return s.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { Each: r } = e('./each'),
            { concatArray: i } = e('./internal/util'),
            { setParallel: s } = e('./internal/collection');
          class _ extends r {
            constructor(e, t) {
              super(e, t, l);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest && this._promise._resolve(i(this._result));
            }
          }
          t.exports = {
            concat: function(e, t) {
              return new _(e, t)._execute();
            },
            Concat: _
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      6: [
        function(e, t) {
          'use strict';
          function l(e) {
            return s.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { EachLimit: r } = e('./eachLimit'),
            { concatArray: i } = e('./internal/util'),
            { setLimit: s } = e('./internal/collection');
          class _ extends r {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
            _callResolve(e, t) {
              (this._result[t] = e),
                0 == --this._rest ? this._promise._resolve(i(this._result)) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            concatLimit: function(e, t, l) {
              return new _(e, t, l)._execute();
            },
            ConcatLimit: _
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      7: [
        function(e, t) {
          'use strict';
          const { EachSeries: l } = e('./eachSeries');
          class r extends l {
            constructor(e, t) {
              super(e, t), (this._result = []);
            }
            _callResolve(e) {
              Array.isArray(e) ? this._result.push(...e) : e !== void 0 && this._result.push(e),
                0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
          }
          t.exports = {
            concatSeries: function(e, t) {
              return new r(e, t)._execute();
            },
            ConcatSeries: r
          };
        },
        { './eachSeries': 14 }
      ],
      8: [
        function(e, t) {
          'use strict';
          t.exports = {
            resolveStack: function(e, t) {
              const { stack: l } = new Error();
              (e._stacks = e._stacks || []), t && t._stacks && e._stacks.push(...t._stacks);
              const r = l.split('\n').slice(4);
              e._stacks.push(r.join('\n'));
            },
            reconstructStack: function(e) {
              const { _value: t, _stacks: r } = e;
              if (!1 != t instanceof Error && r && !t._reconstructed) {
                const e = t.stack.split('\n');
                for (let t = r.length; t--; ) e.push('From previous event:'), e.push(r[t]);
                (t.stack = e.join('\n')), (t._reconstructed = !0);
              }
            }
          };
        },
        {}
      ],
      9: [
        function(e, t) {
          'use strict';
          const l = e('./aigle'),
            { INTERNAL: r } = e('./internal/util');
          class i extends l {
            constructor(e) {
              super(r), (this._ms = e), (this._timer = void 0);
            }
            _resolve(e) {
              return (this._timer = setTimeout(() => l.prototype._resolve.call(this, e), this._ms)), this;
            }
            _reject(e) {
              clearTimeout(this._timer), l.prototype._reject.call(this, e);
            }
          }
          t.exports = {
            delay: function(e, t) {
              return new i(e)._resolve(t);
            },
            Delay: i
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      10: [
        function(e, t) {
          'use strict';
          const { DoWhilst: l } = e('./doWhilst'),
            { UntilTester: r } = e('./until');
          t.exports = function(e, t, i) {
            return 'function' != typeof i && ((i = t), (t = e), (e = void 0)), new l(new r(i), t)._iterate(e);
          };
        },
        { './doWhilst': 11, './until': 77 }
      ],
      11: [
        function(e, t) {
          'use strict';
          const { AigleWhilst: l, WhilstTester: r } = e('./whilst');
          class i extends l {
            constructor(e, t) {
              super(e, t);
            }
            _iterate(e) {
              return this._next(e), this._promise;
            }
          }
          t.exports = {
            doWhilst: function(e, t, l) {
              return 'function' != typeof l && ((l = t), (t = e), (e = void 0)), new i(new r(l), t)._iterate(e);
            },
            DoWhilst: i
          };
        },
        { './whilst': 79 }
      ],
      12: [
        function(e, t) {
          'use strict';
          function l(e) {
            return a.call(this, e), (this._result = e), this;
          }
          const { AigleProxy: r } = e('aigle-core'),
            i = e('./aigle'),
            { INTERNAL: s, PENDING: _ } = e('./internal/util'),
            { execute: o, setParallel: a } = e('./internal/collection');
          class c extends r {
            constructor(e, t, r = l) {
              super(),
                (this._iterator = t),
                (this._promise = new i(s)),
                (this._coll = void 0),
                (this._size = void 0),
                (this._rest = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                (this._iterate = void 0),
                e === _
                  ? ((this._set = r), (this._iterate = this._callResolve), (this._callResolve = o))
                  : r.call(this, e);
            }
            _execute() {
              return 0 === this._rest ? this._promise._resolve(this._result) : this._iterate(), this._promise;
            }
            _callResolve(e) {
              (0 == --this._rest || !1 === e) && this._promise._resolve(this._result);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            each: function(e, t) {
              return new c(e, t)._execute();
            },
            Each: c
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 80 }
      ],
      13: [
        function(e, t) {
          'use strict';
          function l(e) {
            return c.call(this, e), (this._result = e), this;
          }
          const { AigleProxy: r } = e('aigle-core'),
            i = e('./aigle'),
            { DEFAULT_LIMIT: s, INTERNAL: _, PENDING: o } = e('./internal/util'),
            { execute: a, setLimit: c } = e('./internal/collection');
          class n extends r {
            constructor(e, t, r, c = l) {
              super(),
                'function' == typeof t && ((r = t), (t = s)),
                (this._iterator = r),
                (this._promise = new i(_)),
                (this._index = 0),
                (this._limit = t),
                (this._coll = void 0),
                (this._rest = void 0),
                (this._size = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                (this._iterate = void 0),
                (this._callRest = void 0),
                e === o
                  ? ((this._set = c), (this._iterate = this._callResolve), (this._callResolve = a))
                  : c.call(this, e);
            }
            _execute() {
              if (0 === this._rest) this._promise._resolve(this._result);
              else for (; this._limit--; ) this._iterate();
              return this._promise;
            }
            _callResolve(e) {
              !1 === e
                ? ((this._callRest = 0), this._promise._resolve(this._result))
                : 0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
            }
            _callReject(e) {
              (this._callRest = 0), this._promise._reject(e);
            }
          }
          t.exports = {
            eachLimit: function(e, t, l) {
              return new n(e, t, l)._execute();
            },
            EachLimit: n
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 80 }
      ],
      14: [
        function(e, t) {
          'use strict';
          function l(e) {
            return a.call(this, e), (this._result = e), this;
          }
          const { AigleProxy: r } = e('aigle-core'),
            i = e('./aigle'),
            { INTERNAL: s, PENDING: _ } = e('./internal/util'),
            { execute: o, setSeries: a } = e('./internal/collection');
          class c extends r {
            constructor(e, t, r = l) {
              super(),
                (this._iterator = t),
                (this._promise = new i(s)),
                (this._index = 0),
                (this._coll = void 0),
                (this._rest = void 0),
                (this._size = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                (this._iterate = void 0),
                e === _
                  ? ((this._set = r), (this._iterate = this._callResolve), (this._callResolve = o))
                  : r.call(this, e);
            }
            _execute() {
              return 0 === this._rest ? this._promise._resolve(this._result) : this._iterate(), this._promise;
            }
            _callResolve(e) {
              0 == --this._rest || !1 === e ? this._promise._resolve(this._result) : this._iterate();
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            eachSeries: function(e, t) {
              return new c(e, t)._execute();
            },
            EachSeries: c
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 80 }
      ],
      15: [
        function(e, t, r) {
          'use strict';
          const i = ['CancellationError', 'TimeoutError'];
          for (let s = i.length; s--; ) r[i[s]] = class extends Error {};
        },
        {}
      ],
      16: [
        function(e, t) {
          'use strict';
          const { Each: l } = e('./each'),
            { PENDING: r } = e('./internal/util'),
            { setShorthand: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t) {
              super(e, t), (this._result = !0), e === r ? (this._set = i) : i.call(this, e);
            }
            _callResolve(e) {
              e ? 0 == --this._rest && this._promise._resolve(!0) : this._promise._resolve(!1);
            }
          }
          t.exports = {
            every: function(e, t) {
              return new s(e, t)._execute();
            },
            Every: s
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      17: [
        function(e, t) {
          'use strict';
          const { EachLimit: l } = e('./eachLimit');
          class r extends l {
            constructor(e, t, l) {
              super(e, t, l), (this._result = !0);
            }
            _callResolve(e) {
              e
                ? 0 == --this._rest ? this._promise._resolve(!0) : 0 < this._callRest-- && this._iterate()
                : this._promise._resolve(!1);
            }
          }
          t.exports = {
            everyLimit: function(e, t, l) {
              return new r(e, t, l)._execute();
            },
            EveryLimit: r
          };
        },
        { './eachLimit': 13 }
      ],
      18: [
        function(e, t) {
          'use strict';
          const { EachSeries: l } = e('./eachSeries.js');
          class r extends l {
            constructor(e, t) {
              super(e, t), (this._result = !0);
            }
            _callResolve(e) {
              e ? (0 == --this._rest ? this._promise._resolve(!0) : this._iterate()) : this._promise._resolve(!1);
            }
          }
          t.exports = {
            everySeries: function(e, t) {
              return new r(e, t)._execute();
            },
            EverySeries: r
          };
        },
        { './eachSeries.js': 14 }
      ],
      19: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e ? this._coll[t] : o), 0 == --this._rest && this._promise._resolve(a(this._result));
          }
          function i(e, t) {
            (this._result[t] = e ? this._coll[this._keys[t]] : o),
              0 == --this._rest && this._promise._resolve(a(this._result));
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection'),
            { INTERNAL: o, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          (c.prototype._set = l),
            (t.exports = {
              filter: function(e, t) {
                return new c(e, t)._execute();
              },
              Filter: c
            });
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      20: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e ? this._coll[t] : o),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? this._coll[this._keys[t]] : o),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection'),
            { INTERNAL: o, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
          }
          t.exports = {
            filterLimit: function(e, t, l) {
              return new c(e, t, l)._execute();
            },
            FilterLimit: c
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      21: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e ? this._coll[t] : o),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? this._coll[this._keys[t]] : o),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection'),
            { INTERNAL: o, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            filterSeries: function(e, t) {
              return new c(e, t)._execute();
            },
            FilterSeries: c
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      22: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e
              ? ((this._size = 0), this._promise._resolve(this._coll[t]))
              : 0 == --this._rest && this._promise._resolve();
          }
          function i(e, t) {
            e
              ? ((this._size = 0), this._promise._resolve(this._coll[this._keys[t]]))
              : 0 == --this._rest && this._promise._resolve();
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            find: function(e, t) {
              return new o(e, t)._execute();
            },
            Find: o
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      23: [
        function(e, t) {
          'use strict';
          function l(e) {
            return i.call(this, e), void 0 !== this._keys && (this._rest = 0), this;
          }
          const { Each: r } = e('./each'),
            { setShorthand: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t) {
              super(e, t, l), (this._result = -1);
            }
            _callResolve(e, t) {
              e ? ((this._size = 0), this._promise._resolve(t)) : 0 == --this._rest && this._promise._resolve(-1);
            }
          }
          t.exports = {
            findIndex: function(e, t) {
              return new s(e, t)._execute();
            },
            FindIndex: s
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      24: [
        function(e, t) {
          'use strict';
          function l(e) {
            return i.call(this, e), void 0 !== this._keys && (this._rest = 0), this;
          }
          const { EachLimit: r } = e('./eachLimit'),
            { setLimit: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t, r) {
              super(e, t, r, l), (this._result = -1);
            }
            _callResolve(e, t) {
              e
                ? ((this._callRest = 0), this._promise._resolve(t))
                : 0 == --this._rest ? this._promise._resolve(-1) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            findIndexLimit: function(e, t, l) {
              return new s(e, t, l)._execute();
            },
            FindIndexLimit: s
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      25: [
        function(e, t) {
          'use strict';
          function l(e) {
            return i.call(this, e), void 0 !== this._keys && (this._rest = 0), this;
          }
          const { EachSeries: r } = e('./eachSeries'),
            { setSeries: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t) {
              super(e, t, l), (this._result = -1);
            }
            _callResolve(e, t) {
              e ? this._promise._resolve(t) : 0 == --this._rest ? this._promise._resolve(-1) : this._iterate();
            }
          }
          t.exports = {
            findIndexSeries: function(e, t) {
              return new s(e, t)._execute();
            },
            FindIndexSeries: s
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      26: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e ? ((this._size = 0), this._promise._resolve(`${t}`)) : 0 == --this._rest && this._promise._resolve();
          }
          function i(e, t) {
            e
              ? ((this._size = 0), this._promise._resolve(this._keys[t]))
              : 0 == --this._rest && this._promise._resolve();
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            findKey: function(e, t) {
              return new o(e, t)._execute();
            },
            FindKey: o
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      27: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(`${t}`))
              : 0 == --this._rest ? this._promise._resolve() : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(this._keys[t]))
              : 0 == --this._rest ? this._promise._resolve() : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
          }
          t.exports = {
            findKeyLimit: function(e, t, l) {
              return new o(e, t, l)._execute();
            },
            FindKeyLimit: o
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      28: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e ? this._promise._resolve(`${t}`) : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          function i(e, t) {
            e ? this._promise._resolve(this._keys[t]) : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            findKeySeries: function(e, t) {
              return new o(e, t)._execute();
            },
            FindKeySeries: o
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      29: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(this._coll[t]))
              : 0 == --this._rest ? this._promise._resolve() : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(this._coll[this._keys[t]]))
              : 0 == --this._rest ? this._promise._resolve() : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
          }
          t.exports = {
            findLimit: function(e, t, l) {
              return new o(e, t, l)._execute();
            },
            FindLimit: o
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      30: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e ? this._promise._resolve(this._coll[t]) : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          function i(e, t) {
            e
              ? this._promise._resolve(this._coll[this._keys[t]])
              : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            findSeries: function(e, t) {
              return new o(e, t)._execute();
            },
            FindSeries: o
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      31: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            this._result[e] ? this._result[e].push(this._coll[t]) : (this._result[e] = [this._coll[t]]),
              0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            this._result[e]
              ? this._result[e].push(this._coll[this._keys[t]])
              : (this._result[e] = [this._coll[this._keys[t]]]),
              0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            groupBy: function(e, t) {
              return new o(e, t)._execute();
            },
            GroupBy: o
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      32: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            this._result[e] ? this._result[e].push(this._coll[t]) : (this._result[e] = [this._coll[t]]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            this._result[e]
              ? this._result[e].push(this._coll[this._keys[t]])
              : (this._result[e] = [this._coll[this._keys[t]]]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t, r) {
              super(e, t, r, l), (this._result = {});
            }
          }
          t.exports = {
            groupByLimit: function(e, t, l) {
              return new o(e, t, l)._execute();
            },
            GroupByLimit: o
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      33: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            this._result[e] ? this._result[e].push(this._coll[t]) : (this._result[e] = [this._coll[t]]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            this._result[e]
              ? this._result[e].push(this._coll[this._keys[t]])
              : (this._result[e] = [this._coll[this._keys[t]]]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            groupBySeries: function(e, t) {
              return new o(e, t)._execute();
            },
            GroupBySeries: o
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      34: [
        function(e, t) {
          'use strict';
          function l() {
            for (let e = -1; ++e < s; ) {
              const t = r[e];
              switch (((r[e] = void 0), t._resolved)) {
                case 1:
                  t._callResolve();
                  break;
                case 2:
                  t._callReject();
              }
            }
            (s = 0), (i = !1);
          }
          const r = Array(8);
          let s = 0,
            i = !1;
          t.exports = function(e) {
            !1 == i && (setImmediate(l), (i = !0)), (r[s++] = e);
          };
        },
        {}
      ],
      35: [
        function(e, t) {
          'use strict';
          function l() {
            const { _rest: e, _iterator: t, _coll: l } = this;
            for (let r = -1; ++r < e && m(u(t, l[r], r, l), this, r); );
          }
          function r() {
            const { _rest: e, _iterator: t, _coll: l, _keys: r } = this;
            for (let s = -1; ++s < e; ) {
              const e = r[s];
              if (!1 === m(u(t, l[e], e, l), this, s)) break;
            }
          }
          function i() {
            const { _rest: e, _iterator: t, _coll: l, _keys: r, _result: s } = this;
            for (let _ = -1; ++_ < e; ) {
              const e = r[_];
              if (((s[e] = void 0), !1 === m(u(t, l[e], e, l), this, _))) break;
            }
          }
          function s() {
            const { _iterator: e, _coll: t } = this;
            for (let l = -1; ++l < this._size; ) {
              const r = t[l];
              r ? this._callResolve(r[e], l) : this._callResolve(void 0, l);
            }
          }
          function _() {
            const { _iterator: e, _coll: t, _keys: l } = this;
            for (let r = -1; ++r < this._size; ) {
              const i = t[l[r]];
              i ? this._callResolve(i[e], r) : this._callResolve(void 0, r);
            }
          }
          function o() {
            const { _coll: e } = this,
              [t, l] = this._iterator;
            for (let r = -1; ++r < this._size; ) {
              const i = e[r];
              i ? this._callResolve(i[t] === l, r) : this._callResolve(void 0, r);
            }
          }
          function a() {
            const { _coll: e, _keys: t } = this,
              [l, r] = this._iterator;
            for (let s = -1; ++s < this._size; ) {
              const i = e[t[s]];
              i ? this._callResolve(i[l] === r, s) : this._callResolve(void 0, s);
            }
          }
          function c() {
            const { _iterator: e, _coll: t } = this,
              r = Object.keys(e);
            let l = -1;
            first: for (; ++l < this._size; ) {
              const i = t[l];
              if (!i) {
                this._callResolve(void 0, l);
                continue;
              }
              for (let t = r.length; t--; ) {
                const s = r[t];
                if (i[s] !== e[s]) {
                  this._callResolve(!1, l);
                  continue first;
                }
              }
              this._callResolve(!0, l);
            }
          }
          function n() {
            const { _iterator: e, _coll: t, _keys: l } = this,
              r = Object.keys(e);
            let s = -1;
            first: for (; ++s < this._size; ) {
              const i = t[l[s]];
              if (!i) {
                this._callResolve(void 0, s);
                continue;
              }
              for (let t = r.length; t--; ) {
                const l = r[t];
                if (i[l] !== e[l]) {
                  this._callResolve(!1, s);
                  continue first;
                }
              }
              this._callResolve(!0, s);
            }
          }
          const { call3: u, callProxyReciever: m } = e('./util'),
            [p, d, y] = [
              [l, r],
              [l, i],
              [
                function() {
                  const { _coll: e } = this,
                    t = this._index++;
                  m(u(this._iterator, e[t], t, e), this, t);
                },
                function() {
                  const { _coll: e } = this,
                    t = this._index++,
                    l = this._keys[t];
                  m(u(this._iterator, e[l], l, e), this, t);
                }
              ]
            ].map(function([e, t]) {
              return function(l) {
                if (Array.isArray(l)) (this._coll = l), (this._size = l.length), (this._iterate = e);
                else if (l && 'object' == typeof l) {
                  const e = Object.keys(l);
                  (this._coll = l), (this._size = e.length), (this._keys = e), (this._iterate = t);
                } else this._size = 0;
                return (this._rest = this._size), this;
              };
            }),
            [v, h] = [[l, r], [l, i]].map(function([e, t]) {
              return function(l) {
                if (Array.isArray(l))
                  switch (((this._coll = l), (this._size = l.length), typeof this._iterator)) {
                    case 'function':
                      this._iterate = e;
                      break;
                    case 'string':
                      this._iterate = s;
                      break;
                    case 'object':
                      this._iterate = Array.isArray(this._iterator) ? o : c;
                  }
                else if (l && 'object' == typeof l) {
                  const e = Object.keys(l);
                  switch (((this._coll = l), (this._size = e.length), (this._keys = e), typeof this._iterator)) {
                    case 'function':
                      this._iterate = t;
                      break;
                    case 'string':
                      this._iterate = _;
                      break;
                    case 'object':
                      this._iterate = Array.isArray(this._iterator) ? a : n;
                  }
                } else this._size = 0;
                return (this._rest = this._size), this;
              };
            });
          t.exports = {
            execute: function(e) {
              (this._callResolve = this._iterate), this._set(e), this._execute();
            },
            setParallel: p,
            setParallelWithOrder: d,
            setShorthand: v,
            setShorthandWithOrder: h,
            setSeries: y,
            setLimit: function(e) {
              y.call(this, e);
              const { _limit: t, _size: l } = this;
              return (this._limit = t < l ? t : l), (this._callRest = l - this._limit), this;
            }
          };
        },
        { './util': 38 }
      ],
      36: [
        function(e, t) {
          'use strict';
          function l(e) {
            const { _args: t } = this;
            return (
              t[0] === n && ((t[0] = e), (this._callResolve = this._set)), m(u(this._func, t), this), this._promise
            );
          }
          function r(e) {
            const { _args: t } = this;
            t[0] === n ? ((t[0] = e), (this._callResolve = this._set)) : (e = t[0]);
            const l = t[1],
              r = 'function' == typeof l;
            return (
              r && Array.isArray(e)
                ? i(this, o, e => {
                    let l = 0;
                    (t[1] = () => e[l++]), m(u(this._func, t), this);
                  })
                : r && e && 'object' == typeof e
                  ? i(this, a, e => {
                      let l = 0;
                      const r = Object.keys(e);
                      (t[1] = () => e[r[l++]]), m(u(this._func, t), this);
                    })
                  : m(u(this._func, t), this),
              this._promise
            );
          }
          function i(e, t, l) {
            const [r, i] = e._args,
              s = t(r, (e, t) => i(e, t, r));
            return 1 === s._resolved ? l(s._value) : s.then(l, t => e._callReject(t));
          }
          const { AigleProxy: s } = e('aigle-core'),
            _ = e('../aigle'),
            { map: o } = e('../map'),
            { mapValues: a } = e('../mapValues'),
            { INTERNAL: c, PENDING: n, apply: u, callProxyReciever: m } = e('./util');
          t.exports = {
            createProxy: function(e, t) {
              const i = t ? r : l;
              return class extends p {
                constructor(...t) {
                  super(e, i, t);
                }
              };
            }
          };
          class p extends s {
            constructor(e, t, l) {
              super(),
                (this._promise = new _(c)),
                (this._func = e),
                (this._args = l),
                (this._execute = t),
                l[0] === n && ((this._set = this._callResolve), (this._callResolve = t));
            }
            _callResolve(e) {
              this._promise._resolve(e);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
        },
        { '../aigle': 2, '../map': 40, '../mapValues': 43, './util': 38, 'aigle-core': 80 }
      ],
      37: [
        function(e, t) {
          'use strict';
          t.exports = class {
            constructor(e = 8) {
              (this.array = Array(e)), (this.length = 0);
            }
            push(e) {
              this.array[this.length++] = e;
            }
          };
        },
        {}
      ],
      38: [
        function(e, t) {
          'use strict';
          function l() {}
          function r(e, t) {
            try {
              return e(t);
            } catch (t) {
              return (d.e = t), d;
            }
          }
          function i(e, t) {
            if (!t || !t.then) return void e._resolve(t);
            if (t instanceof m)
              switch (t._resolved) {
                case 0:
                  return void t._addReceiver(e, l);
                case 1:
                  return void e._resolve(t._value);
                case 2:
                  return t.suppressUnhandledRejections(), void e._reject(t._value);
              }
            s(t, e);
          }
          function s(e, t) {
            e.then(
              function(e) {
                t._resolve(e);
              },
              function(e) {
                t._reject(e);
              }
            );
          }
          function _(e, t, l) {
            e.then(
              function(e) {
                t._callResolve(e, l);
              },
              function(e) {
                t._callReject(e);
              }
            );
          }
          function o(e) {
            let t = e.length;
            const l = Array(t);
            for (; t--; ) l[t] = e[t];
            return l;
          }
          function a(e) {
            const t = Object.keys(e);
            let r = t.length;
            const l = {};
            for (; r--; ) {
              const i = t[r];
              l[i] = e[i];
            }
            return l;
          }
          function c(e, t, i, s, _) {
            let o = t,
              l = i;
            for (; o <= l; ) {
              for (t = o; o < l && e[o] < s; ) o++;
              for (; l >= t && e[l] >= s; ) l--;
              if (o > l) break;
              n(e, _, o++, l--);
            }
            return o;
          }
          function n(e, t, s, l) {
            const r = e[s];
            (e[s] = e[l]), (e[l] = r);
            const _ = t[s];
            (t[s] = t[l]), (t[l] = _);
          }
          function u(e, t, l, r) {
            if (t === l) return;
            let s = t;
            for (; ++s <= l && e[t] === e[s]; ) {
              const e = s - 1;
              if (r[e] > r[s]) {
                const t = r[e];
                (r[e] = r[s]), (r[s] = t);
              }
            }
            if (!(s > l)) {
              const i = e[t] > e[s] ? t : s;
              (s = c(e, t, l, e[i], r)), u(e, t, s - 1, r), u(e, s, l, r);
            }
          }
          const { AigleCore: m } = e('aigle-core'),
            { version: p } = e('../../package.json'),
            d = { e: void 0 },
            y = 'function' == typeof Symbol ? Symbol.iterator : function() {};
          t.exports = {
            VERSION: p,
            DEFAULT_LIMIT: 8,
            INTERNAL: l,
            PENDING: function() {},
            UNHANDLED: function() {},
            defaultIterator: function(e) {
              return e;
            },
            errorObj: d,
            iteratorSymbol: y,
            call0: function(e) {
              try {
                return e();
              } catch (t) {
                return (d.e = t), d;
              }
            },
            call1: r,
            call3: function(e, t, l, r) {
              try {
                return e(t, l, r);
              } catch (t) {
                return (d.e = t), d;
              }
            },
            apply: function(e, t) {
              try {
                switch (t.length) {
                  case 0:
                    return e();
                  case 1:
                    return e(t[0]);
                  case 2:
                    return e(t[0], t[1]);
                  case 3:
                    return e(t[0], t[1], t[2]);
                  default:
                    return e.apply(null, t);
                }
              } catch (t) {
                return (d.e = t), d;
              }
            },
            callResolve: function(e, t, l) {
              if ('function' != typeof t) return void e._resolve(l);
              const s = r(t, l);
              return s === d ? void e._reject(d.e) : void i(e, s);
            },
            callReject: function(e, t, l) {
              if ('function' != typeof t) return void e._reject(l);
              const s = r(t, l);
              return s === d ? void e._reject(d.e) : void i(e, s);
            },
            callReceiver: i,
            callThen: s,
            callProxyReciever: function(e, t, l) {
              if (e instanceof m)
                switch (e._resolved) {
                  case 0:
                    return e._addReceiver(t, l), !0;
                  case 1:
                    return t._callResolve(e._value, l), !0;
                  case 2:
                    return e.suppressUnhandledRejections(), t._callReject(e._value), !1;
                }
              return e === d ? (t._callReject(d.e), !1) : (e && e.then ? _(e, t, l) : t._callResolve(e, l), !0);
            },
            promiseArrayEach: function(e) {
              const { _rest: t, _coll: l } = e;
              for (let r = -1; ++r < t; ) {
                const t = l[r];
                if (t instanceof m)
                  switch (t._resolved) {
                    case 0:
                      t._addReceiver(e, r);
                      continue;
                    case 1:
                      e._callResolve(t._value, r);
                      continue;
                    case 2:
                      return t.suppressUnhandledRejections(), void e._callReject(t._value);
                  }
                t && t.then ? _(t, e, r) : e._callResolve(t, r);
              }
            },
            promiseObjectEach: function(e) {
              const { _rest: t, _keys: l, _coll: r, _result: s } = e;
              for (let o = -1; ++o < t; ) {
                const t = l[o],
                  i = r[t];
                if (((s[t] = void 0), i instanceof m))
                  switch (i._resolved) {
                    case 0:
                      i._addReceiver(e, t);
                      continue;
                    case 1:
                      e._callResolve(i._value, t);
                      continue;
                    case 2:
                      return i.suppressUnhandledRejections(), void e._callReject(i._value);
                  }
                i && i.then ? _(i, e, t) : e._callResolve(i, t);
              }
            },
            promiseMapEach: function(e) {
              const { _result: t } = e,
                l = e._coll[y]();
              for (let r; !1 === (r = l.next()).done; ) {
                const [l, i] = r.value;
                if ((t.set(l, i), i instanceof m))
                  switch (i._resolved) {
                    case 0:
                      i._addReceiver(e, l);
                      continue;
                    case 1:
                      e._callResolve(i._value, l);
                      continue;
                    case 2:
                      return i.suppressUnhandledRejections(), void e._callReject(i._value);
                  }
                i && i.then ? _(i, e, l) : e._callResolve(i, l);
              }
            },
            promiseSetEach: function(e) {
              const t = e._coll[y]();
              for (let l, r = -1; !1 === (l = t.next()).done; ) {
                const t = l.value;
                if (t instanceof m)
                  switch (t._resolved) {
                    case 0:
                      t._addReceiver(e, ++r);
                      continue;
                    case 1:
                      e._callResolve(t._value, ++r);
                      continue;
                    case 2:
                      return t.suppressUnhandledRejections(), void e._callReject(t._value);
                  }
                t && t.then ? _(t, e, ++r) : e._callResolve(t, ++r);
              }
            },
            compactArray: function(e) {
              let t = -1;
              const r = e.length,
                i = [];
              for (; ++t < r; ) {
                const r = e[t];
                r !== l && i.push(r);
              }
              return i;
            },
            concatArray: function(e) {
              let t = -1;
              const r = e.length,
                l = [];
              for (; ++t < r; ) {
                const r = e[t];
                Array.isArray(r) ? l.push(...r) : r !== void 0 && l.push(r);
              }
              return l;
            },
            clone: function(e) {
              return Array.isArray(e) ? o(e) : a(e);
            },
            createEmptyObject: function(e, t) {
              let r = -1;
              const i = t.length,
                l = {};
              for (; ++r < i; ) l[t[r]] = void 0;
              return l;
            },
            sortArray: function(e, t) {
              const r = e.length,
                l = Array(r);
              for (let s = 0; s < r; s++) l[s] = s;
              u(t, 0, r - 1, l);
              const s = Array(r);
              for (let _ = 0; _ < r; _++) {
                const t = l[_];
                s[_] = t === void 0 ? e[_] : e[t];
              }
              return s;
            },
            sortObject: function(e, t, r) {
              const s = t.length,
                l = Array(s);
              for (let _ = 0; _ < s; _++) l[_] = _;
              u(r, 0, s - 1, l);
              const _ = Array(s);
              for (let o = 0; o < s; o++) {
                const r = l[o];
                _[o] = e[t[r === void 0 ? o : r]];
              }
              return _;
            }
          };
        },
        { '../../package.json': 83, 'aigle-core': 80 }
      ],
      39: [
        function(e, t) {
          'use strict';
          function l(e, t) {
            const { _handler: l } = e;
            if (l === void 0) return e._promise._resolve(t);
            switch (typeof t) {
              case 'string':
                t = t.split('');
                break;
              case 'object':
                if (Array.isArray(t)) break;
                if (t) {
                  const e = Object.keys(t);
                  let r = e.length;
                  const l = Array(r);
                  for (; r--; ) l[r] = t[e[r]];
                  t = l;
                  break;
                }
              default:
                return a(_(l, t), e, s);
            }
            a(o(l, t), e, s);
          }
          const { AigleProxy: r } = e('aigle-core'),
            i = e('./aigle'),
            { INTERNAL: s, call1: _, apply: o, callProxyReciever: a } = e('./internal/util');
          class c extends r {
            constructor(e, t) {
              super(), (this._promise = new i(s)), (this._rest = t), (this._result = Array(t)), (this._handler = e);
            }
            _callResolve(e, t) {
              if (t === s) return this._promise._resolve(e);
              if (((this._result[t] = e), 0 == --this._rest)) {
                const { _handler: e, _result: t } = this;
                void 0 === e ? this._promise._resolve(t) : a(o(e, t), this, s);
              }
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            join: function() {
              let e = arguments.length;
              const t = 'function' == typeof arguments[e - 1] ? arguments[--e] : void 0,
                l = new c(t, e);
              for (; e--; ) a(arguments[e], l, e);
              return l._promise;
            },
            Spread: class extends r {
              constructor(e) {
                super(), (this._promise = new i(s)), (this._handler = e);
              }
              _callResolve(e, t) {
                return t === s ? this._promise._resolve(e) : void l(this, e);
              }
              _callReject(e) {
                this._promise._reject(e);
              }
            }
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      40: [
        function(e, t) {
          'use strict';
          function l(e) {
            return i.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { Each: r } = e('./each'),
            { setShorthand: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t) {
              super(e, t, l);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
            }
          }
          t.exports = {
            map: function(e, t) {
              return new s(e, t)._execute();
            },
            Map: s
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      41: [
        function(e, t) {
          'use strict';
          function l(e) {
            return i.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { EachLimit: r } = e('./eachLimit'),
            { setLimit: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
            _callResolve(e, t) {
              (this._result[t] = e),
                0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            mapLimit: function(e, t, l) {
              return new s(e, t, l)._execute();
            },
            MapLimit: s
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      42: [
        function(e, t) {
          'use strict';
          function l(e) {
            return i.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { EachSeries: r } = e('./eachSeries'),
            { setSeries: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t) {
              super(e, t, l);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
          }
          t.exports = {
            mapSeries: function(e, t) {
              return new s(e, t)._execute();
            },
            MapSeries: s
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      43: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            (this._result[this._keys[t]] = e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthandWithOrder: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            mapValues: function(e, t) {
              return new o(e, t)._execute();
            },
            MapValues: o
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      44: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              void 0 === this._keys
                ? ((this._result = {}), (this._callResolve = r))
                : ((this._result = o(e, this._keys)), (this._callResolve = i)),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[this._keys[t]] = e),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection'),
            { createEmptyObject: o } = e('./internal/util');
          class a extends s {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
          }
          t.exports = {
            mapValuesLimit: function(e, t, l) {
              return new a(e, t, l)._execute();
            },
            MapValuesLimit: a
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      45: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            (this._result[t] = e), 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            (this._result[this._keys[t]] = e),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            mapValuesSeries: function(e, t) {
              return new o(e, t)._execute();
            },
            MapValuesSeries: o
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      46: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e || (this._result[t] = this._coll[t]), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            omit: function(e, t) {
              return new o(e, t)._execute();
            },
            Omit: o
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      47: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e || (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t, r) {
              super(e, t, r, l), (this._result = {});
            }
          }
          t.exports = {
            omitLimit: function(e, t, l) {
              return new o(e, t, l)._execute();
            },
            OmitLimit: o
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      48: [
        function(e, t) {
          'use strict';
          function l(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e || (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { PENDING: _ } = e('./internal/util'),
            { setSeries: o } = e('./internal/collection');
          class a extends s {
            constructor(e, t) {
              super(e, t),
                (this._result = {}),
                e === _ ? (this._set = l) : (this._callResolve = this._keys === void 0 ? r : i);
            }
          }
          t.exports = {
            omitSeries: function(e, t) {
              return new a(e, t)._execute();
            },
            OmitSeries: a
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      49: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            {
              INTERNAL: i,
              PENDING: s,
              promiseArrayEach: _,
              promiseObjectEach: o,
              promiseMapEach: a,
              promiseSetEach: c,
              iteratorSymbol: n
            } = e('./internal/util'),
            { callResolve: u, callResolveMap: m } = e('./props');
          class p extends l {
            constructor(e) {
              super(),
                (this._promise = new r(i)),
                (this._rest = void 0),
                (this._coll = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                e === s ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (((this._coll = e), Array.isArray(e))) {
                const t = e.length;
                (this._rest = t), (this._result = Array(t)), (this._callResolve = u), _(this);
              } else if (!e || 'object' != typeof e) (this._rest = 0), (this._result = {});
              else if (e[n])
                (this._rest = e.size),
                  e instanceof Map
                    ? ((this._result = new Map()), (this._callResolve = m), a(this))
                    : ((this._result = Array(this._rest)), (this._callResolve = u), c(this));
              else {
                const t = Object.keys(e);
                (this._rest = t.length), (this._keys = t), (this._result = {}), (this._callResolve = u), o(this);
              }
              return 0 === this._rest && this._promise._resolve(this._result), this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            parallel: function(e) {
              return new p(e)._promise;
            },
            Parallel: p
          };
        },
        { './aigle': 2, './internal/util': 38, './props': 55, 'aigle-core': 80 }
      ],
      50: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e && (this._result[t] = this._coll[t]), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            pickBy: function(e, t) {
              return new o(e, t)._execute();
            },
            PickBy: o
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      51: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e && (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t, r) {
              super(e, t, r, l), (this._result = {});
            }
          }
          t.exports = {
            pickByLimit: function(e, t, l) {
              return new o(e, t, l)._execute();
            },
            PickByLimit: o
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      52: [
        function(e, t) {
          'use strict';
          function l(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? r : i), this;
          }
          function r(e, t) {
            e && (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection');
          class o extends s {
            constructor(e, t) {
              super(e, t, l), (this._result = {});
            }
          }
          t.exports = {
            pickBySeries: function(e, t) {
              return new o(e, t)._execute();
            },
            PickBySeries: o
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      53: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (t, l) => (t ? e._reject(t) : e._resolve(l));
          }
          function l(e, t) {
            function l(i) {
              const o = new s(_),
                a = r(o);
              let c = arguments.length;
              switch (c) {
                case 0:
                  e[t](a);
                  break;
                case 1:
                  e[t](i, a);
                  break;
                default:
                  const l = Array(c);
                  for (; c--; ) l[c] = arguments[c];
                  (l[l.length] = a), e[t].apply(e, l);
              }
              return o;
            }
            return (l.__isPromisified__ = !0), l;
          }
          function i(e, t) {
            function l(i) {
              const o = new s(_),
                a = r(o);
              let c = arguments.length;
              switch (c) {
                case 0:
                  e.call(t || this, a);
                  break;
                case 1:
                  e.call(t || this, i, a);
                  break;
                default:
                  const l = Array(c);
                  for (; c--; ) l[c] = arguments[c];
                  (l[l.length] = a), e.apply(t || this, l);
              }
              return o;
            }
            return (l.__isPromisified__ = !0), l;
          }
          const s = e('./aigle'),
            { INTERNAL: _ } = e('./internal/util'),
            o = 'function' == typeof setImmediate ? setImmediate : {};
          t.exports = function(e, t) {
            switch (typeof e) {
              case 'object':
                switch (typeof t) {
                  case 'string':
                  case 'number':
                    return e[t].__isPromisified__ ? e[t] : l(e, t);
                  default:
                    throw new TypeError('Second argument is invalid');
                }
              case 'function':
                if (e.__isPromisified__) return e;
                switch (e) {
                  case setTimeout:
                    return s.delay;
                  case o:
                    return s.resolve;
                }
                const r = t && t.context !== void 0 ? t.context : void 0;
                return i(e, r);
              default:
                throw new TypeError('Type of first argument is not function');
            }
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      54: [
        function(e, t) {
          'use strict';
          function l(e) {
            return /^(?!_).*/.test(e);
          }
          function r(e, t, l, r, _, o) {
            const a = {};
            switch (typeof l) {
              case 'function':
                if (_) {
                  if (l.__isPromisified__) return;
                  const t = `${r}${e}`;
                  if (!_[t]) _[t] = s(l);
                  else if (!_[t].__isPromisified__)
                    throw new TypeError(`Cannot promisify an API that has normal methods with '${e}'-suffix`);
                }
                i(e, t, l, l, o, a), i(e, t, l.prototype, l.prototype, o, a);
                break;
              case 'object':
                if (!l) break;
                i(e, t, l, l, o, a), i(e, t, Object.getPrototypeOf(l), l, o, a);
            }
          }
          function i(e, t, i, s, n, u) {
            if (0 != n-- && i && o !== i && a !== i && c !== i && !Object.isFrozen(i)) {
              const o = Object.getOwnPropertyNames(i);
              for (let a = o.length; a--; ) {
                const l = o[a];
                if (!0 === _[l] || !0 === u[l] || !t(l)) continue;
                const c = Object.getOwnPropertyDescriptor(i, l);
                !c || c.set || c.get || ((u[l] = !0), r(e, t, i[l], l, s, n));
              }
            }
          }
          const s = e('./promisify'),
            _ = {
              constructor: !0,
              arity: !0,
              length: !0,
              name: !0,
              arguments: !0,
              caller: !0,
              callee: !0,
              prototype: !0,
              __isPromisified__: !0
            };
          t.exports = function(e, t) {
            const { suffix: i = 'Async', filter: s = l, depth: _ = 2 } = t || {};
            return r(i, s, e, void 0, void 0, _), e;
          };
          const o = Function.prototype,
            a = Object.prototype,
            c = Array.prototype;
        },
        { './promisify': 53 }
      ],
      55: [
        function(e, t) {
          'use strict';
          function l(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function r(e, t) {
            this._result.set(t, e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          const { AigleProxy: i } = e('aigle-core'),
            s = e('./aigle'),
            { INTERNAL: _, PENDING: o, promiseObjectEach: a, promiseMapEach: c } = e('./internal/util');
          class n extends i {
            constructor(e) {
              super(),
                (this._promise = new s(_)),
                (this._rest = void 0),
                (this._result = void 0),
                (this._coll = void 0),
                (this._keys = void 0),
                e === o ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (((this._coll = e), !e || 'object' != typeof e)) (this._rest = 0), (this._result = {});
              else if (e instanceof Map)
                (this._result = new Map()), (this._rest = e.size), (this._callResolve = r), c(this);
              else {
                const t = Object.keys(e);
                (this._result = {}), (this._rest = t.length), (this._keys = t), (this._callResolve = l), a(this);
              }
              return 0 === this._rest && this._promise._resolve(this._result), this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            props: function(e) {
              return new n(e)._promise;
            },
            Props: n,
            callResolve: l,
            callResolveMap: r
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      56: [
        function(e, t) {
          'use strict';
          function l(e) {
            this._promise._resolve(e);
          }
          const { AigleProxy: r } = e('aigle-core'),
            i = e('./aigle'),
            {
              INTERNAL: s,
              PENDING: _,
              promiseArrayEach: o,
              promiseObjectEach: a,
              promiseMapEach: c,
              promiseSetEach: n,
              iteratorSymbol: u
            } = e('./internal/util');
          class m extends r {
            constructor(e) {
              super(),
                (this._promise = new i(s)),
                (this._rest = void 0),
                (this._coll = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                e === _ ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (((this._coll = e), (this._callResolve = l), Array.isArray(e))) {
                const t = e.length;
                (this._rest = t), o(this);
              } else if (!e || 'object' != typeof e) this._rest = 0;
              else if (e[u]) (this._rest = e.size), e instanceof Map ? ((this._result = new Map()), c(this)) : n(this);
              else {
                const t = Object.keys(e);
                (this._result = {}), (this._rest = t.length), (this._keys = t), a(this);
              }
              return this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            race: function(e) {
              return new m(e)._promise;
            },
            Race: m
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      57: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              n.call(this, e),
              void 0 === this._keys
                ? ((this._iterate = r), (this._execute = s))
                : ((this._iterate = i), (this._execute = _)),
              this
            );
          }
          function r(e, t) {
            d(p(this._iterator, t, this._coll[e], e), this, e);
          }
          function i(e, t) {
            const l = this._keys[e];
            d(p(this._iterator, t, this._coll[l], l), this, e);
          }
          function s() {
            return (
              0 === this._rest
                ? this._promise._resolve(this._result)
                : void 0 === this._result ? this._callResolve(this._coll[0], 0) : this._iterate(0, this._result),
              this._promise
            );
          }
          function _() {
            return (
              0 === this._rest
                ? this._promise._resolve(this._result)
                : void 0 === this._result
                  ? this._callResolve(this._coll[this._keys[0]], 0)
                  : this._iterate(0, this._result),
              this._promise
            );
          }
          const { AigleProxy: o } = e('aigle-core'),
            a = e('./aigle'),
            { execute: c, setSeries: n } = e('./internal/collection'),
            { INTERNAL: u, PENDING: m, call3: p, callProxyReciever: d } = e('./internal/util');
          class y extends o {
            constructor(e, t, r) {
              super(),
                (this._result = r),
                (this._iterator = t),
                (this._promise = new a(u)),
                (this._coll = void 0),
                (this._rest = void 0),
                (this._size = void 0),
                (this._keys = void 0),
                (this._iterate = void 0),
                e === m
                  ? ((this._set = l), (this._iterate = this._callResolve), (this._callResolve = c))
                  : l.call(this, e);
            }
            _callResolve(e, t) {
              0 == --this._rest ? this._promise._resolve(e) : this._iterate(++t, e);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            reduce: function(e, t, l) {
              return new y(e, t, l)._execute();
            },
            Reduce: y
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 80 }
      ],
      58: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e ? o : this._coll[t]), 0 == --this._rest && this._promise._resolve(a(this._result));
          }
          function i(e, t) {
            (this._result[t] = e ? o : this._coll[this._keys[t]]),
              0 == --this._rest && this._promise._resolve(a(this._result));
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection'),
            { INTERNAL: o, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            reject: function(e, t) {
              return new c(e, t)._execute();
            },
            Reject: c
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      59: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e ? o : this._coll[t]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? o : this._coll[this._keys[t]]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection'),
            { INTERNAL: o, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
          }
          t.exports = {
            rejectLimit: function(e, t, l) {
              return new c(e, t, l)._execute();
            },
            RejectLimit: c
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      60: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e ? o : this._coll[t]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? o : this._coll[this._keys[t]]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection'),
            { INTERNAL: o, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            rejectSeries: function(e, t) {
              return new c(e, t)._execute();
            },
            RejectSeries: c
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      61: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            { INTERNAL: i, call0: s, callProxyReciever: _ } = e('./internal/util');
          class o extends l {
            constructor(e, t) {
              super(), (this._promise = new r(i)), (this._rest = t), (this._handler = e), this._iterate();
            }
            _iterate() {
              _(s(this._handler), this, void 0);
            }
            _callResolve(e) {
              this._promise._resolve(e);
            }
            _callReject(e) {
              0 == --this._rest ? this._promise._reject(e) : this._iterate();
            }
          }
          t.exports = function(e, t) {
            return 'function' == typeof e && ((t = e), (e = 5)), new o(t, e)._promise;
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      62: [
        function(e, t) {
          'use strict';
          const { Each: l } = e('./each'),
            { setShorthand: r } = e('./internal/collection');
          class i extends l {
            constructor(e, t) {
              super(e, t, r), (this._result = !1);
            }
            _callResolve(e) {
              e ? this._promise._resolve(!0) : 0 == --this._rest && this._promise._resolve(!1);
            }
          }
          t.exports = {
            some: function(e, t) {
              return new i(e, t)._execute();
            },
            Some: i
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      63: [
        function(e, t) {
          'use strict';
          const { EachLimit: l } = e('./eachLimit');
          class r extends l {
            constructor(e, t, l) {
              super(e, t, l), (this._result = !1);
            }
            _callResolve(e) {
              e
                ? this._promise._resolve(!0)
                : 0 == --this._rest ? this._promise._resolve(!1) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            someLimit: function(e, t, l) {
              return new r(e, t, l)._execute();
            },
            SomeLimit: r
          };
        },
        { './eachLimit': 13 }
      ],
      64: [
        function(e, t) {
          'use strict';
          const { EachSeries: l } = e('./eachSeries.js');
          class r extends l {
            constructor(e, t) {
              super(e, t), (this._result = !1);
            }
            _callResolve(e) {
              e ? this._promise._resolve(!0) : 0 == --this._rest ? this._promise._resolve(!1) : this._iterate();
            }
          }
          t.exports = {
            someSeries: function(e, t) {
              return new r(e, t)._execute();
            },
            SomeSeries: r
          };
        },
        { './eachSeries.js': 14 }
      ],
      65: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(o(this._coll, this._result));
          }
          function i(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(a(this._coll, this._keys, this._result));
          }
          const { Each: s } = e('./each'),
            { setShorthand: _ } = e('./internal/collection'),
            { sortArray: o, sortObject: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            sortBy: function(e, t) {
              return new c(e, t)._execute();
            },
            SortBy: c
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      66: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e),
              0 == --this._rest
                ? this._promise._resolve(o(this._coll, this._result))
                : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e),
              0 == --this._rest
                ? this._promise._resolve(a(this._coll, this._keys, this._result))
                : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection'),
            { sortArray: o, sortObject: a } = e('./internal/util');
          class c extends s {
            constructor(e, t, r) {
              super(e, t, r, l);
            }
          }
          t.exports = {
            sortByLimit: function(e, t, l) {
              return new c(e, t, l)._execute();
            },
            SortByLimit: c
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      67: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? r : i),
              this
            );
          }
          function r(e, t) {
            (this._result[t] = e),
              0 == --this._rest ? this._promise._resolve(o(this._coll, this._result)) : this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e),
              0 == --this._rest ? this._promise._resolve(a(this._coll, this._keys, this._result)) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection'),
            { sortArray: o, sortObject: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, l);
            }
          }
          t.exports = {
            sortBySeries: function(e, t) {
              return new c(e, t)._execute();
            },
            SortBySeries: c
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      68: [
        function(e, t) {
          'use strict';
          const l = e('./aigle'),
            { INTERNAL: r, callResolve: i } = e('./internal/util');
          t.exports = function(e, t) {
            const s = new l(r);
            return i(s, t, e), s.then(() => e);
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      69: [
        function(e, t) {
          'use strict';
          const l = e('./aigle'),
            { INTERNAL: r, callResolve: i } = e('./internal/util');
          t.exports = function(e, t) {
            const s = new l(r);
            return i(s, t, e), s;
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      70: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            { TimeoutError: i } = e('./error'),
            { INTERNAL: s } = e('./internal/util');
          t.exports = class extends l {
            constructor(e, t) {
              super(),
                (this._promise = new r(s)),
                (this._message = t),
                (this._timer = setTimeout(() => {
                  t ? this._callReject(t) : this._callReject(new i('operation timed out'));
                }, e));
            }
            _callResolve(e) {
              clearTimeout(this._timer), this._promise._resolve(e);
            }
            _callReject(e) {
              clearTimeout(this._timer), this._promise._reject(e);
            }
          };
        },
        { './aigle': 2, './error': 15, './internal/util': 38, 'aigle-core': 80 }
      ],
      71: [
        function(e, t) {
          'use strict';
          function l(e) {
            (e = 0 | +e),
              1 <= e ? ((this._rest = e), (this._result = Array(e))) : ((this._rest = 0), (this._result = []));
          }
          function r(e) {
            (this._callResolve = this._rest), l.call(this, e), this._execute();
          }
          const { AigleProxy: i } = e('aigle-core'),
            s = e('./aigle'),
            { INTERNAL: _, PENDING: o, defaultIterator: a, call1: c, callProxyReciever: n } = e('./internal/util');
          class u extends i {
            constructor(e, t) {
              super(),
                (this._promise = new s(_)),
                (this._iterator = 'function' == typeof t ? t : a),
                (this._rest = void 0),
                (this._result = void 0),
                e === o ? ((this._rest = this._callResolve), (this._callResolve = r)) : l.call(this, e);
            }
            _execute() {
              if (1 <= this._rest) {
                const { _rest: e, _iterator: t } = this;
                for (let l = -1; ++l < e && n(c(t, l), this, l); );
              } else this._promise._resolve(this._result);
              return this._promise;
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            times: function(e, t) {
              return new u(e, t)._execute();
            },
            Times: u,
            set: l,
            execute: r
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      72: [
        function(e, t) {
          'use strict';
          function l(e) {
            if (((e = 0 | +e), 1 <= e)) {
              (this._rest = e), (this._result = Array(e));
              const { _limit: t } = this;
              (this._limit = t < e ? t : e), (this._callRest = e - this._limit);
            } else (this._rest = 0), (this._result = []);
          }
          function r(e) {
            (this._callResolve = this._rest), l.call(this, e), this._execute();
          }
          const { AigleProxy: i } = e('aigle-core'),
            s = e('./aigle'),
            { INTERNAL: _, PENDING: o, DEFAULT_LIMIT: a, defaultIterator: c, call1: n, callProxyReciever: u } = e(
              './internal/util'
            );
          class m extends i {
            constructor(e, t, i) {
              super(),
                'function' == typeof t && ((i = t), (t = a)),
                (this._promise = new s(_)),
                (this._index = 0),
                (this._limit = t),
                (this._iterator = 'function' == typeof i ? i : c),
                (this._rest = void 0),
                (this._result = void 0),
                (this._callRest = void 0),
                e === o ? ((this._rest = this._callResolve), (this._callResolve = r)) : l.call(this, e);
            }
            _execute() {
              if (0 === this._rest) this._promise._resolve(this._result);
              else for (; this._limit--; ) this._iterate();
              return this._promise;
            }
            _iterate() {
              const e = this._index++;
              u(n(this._iterator, e), this, e);
            }
            _callResolve(e, t) {
              (this._result[t] = e),
                0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
            }
            _callReject(e) {
              (this._callRest = 0), this._promise._reject(e);
            }
          }
          t.exports = {
            timesLimit: function(e, t, l) {
              return new m(e, t, l)._execute();
            },
            TimesLimit: m
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      73: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            { set: i, execute: s } = e('./times'),
            { INTERNAL: _, PENDING: o, defaultIterator: a, call1: c, callProxyReciever: n } = e('./internal/util');
          class u extends l {
            constructor(e, t) {
              super(),
                (this._promise = new r(_)),
                (this._iterator = 'function' == typeof t ? t : a),
                (this._index = 0),
                (this._rest = void 0),
                (this._result = void 0),
                e === o ? ((this._rest = this._callResolve), (this._callResolve = s)) : i.call(this, e);
            }
            _execute() {
              return 1 <= this._rest ? this._iterate() : this._promise._resolve(this._result), this._promise;
            }
            _iterate() {
              const e = this._index++;
              n(c(this._iterator, e), this, e);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            timesSeries: function(e, t) {
              return new u(e, t)._execute();
            },
            TimesSeries: u
          };
        },
        { './aigle': 2, './internal/util': 38, './times': 71, 'aigle-core': 80 }
      ],
      74: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              void 0 !== this._keys || void 0 === this._coll
                ? (void 0 === this._result && (this._result = {}), (this._iterate = i))
                : (void 0 === this._result && (this._result = []), (this._iterate = r)),
              this
            );
          }
          function r() {
            const { _rest: e, _result: t, _iterator: l, _coll: r } = this;
            for (let s = -1; ++s < e && a(o(l, t, r[s], s), this, s); );
          }
          function i() {
            const { _rest: e, _result: t, _iterator: l, _coll: r, _keys: s } = this;
            for (let _ = -1; ++_ < e; ) {
              const e = s[_];
              if (!1 === a(o(l, t, r[e], e), this, _)) break;
            }
          }
          const { Each: s } = e('./each'),
            { setParallel: _ } = e('./internal/collection'),
            { call3: o, callProxyReciever: a, clone: c } = e('./internal/util');
          class n extends s {
            constructor(e, t, r) {
              super(e, t, l), r !== void 0 && (this._result = r);
            }
            _callResolve(e) {
              !1 === e
                ? this._promise._resolve(c(this._result))
                : 0 == --this._rest && this._promise._resolve(this._result);
            }
          }
          t.exports = {
            transform: function(e, t, l) {
              return new n(e, t, l)._execute();
            },
            Transform: n
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      75: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              void 0 !== this._keys || void 0 === this._coll
                ? (void 0 === this._result && (this._result = {}), (this._iterate = i))
                : (void 0 === this._result && (this._result = []), (this._iterate = r)),
              this
            );
          }
          function r() {
            const e = this._index++;
            c(a(this._iterator, this._result, this._coll[e], e), this, e);
          }
          function i() {
            const e = this._index++,
              t = this._keys[e];
            c(a(this._iterator, this._result, this._coll[t], t), this, e);
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: _ } = e('./internal/collection'),
            { DEFAULT_LIMIT: o, call3: a, callProxyReciever: c, clone: n } = e('./internal/util');
          class u extends s {
            constructor(e, t, r, i) {
              'function' == typeof t && ((i = r), (r = t), (t = o)),
                super(e, t, r, l),
                i !== void 0 && (this._result = i);
            }
            _callResolve(e) {
              !1 === e
                ? this._promise._resolve(n(this._result))
                : 0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            transformLimit: function(e, t, l, r) {
              return new u(e, t, l, r)._execute();
            },
            TransformLimit: u
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      76: [
        function(e, t) {
          'use strict';
          function l(e) {
            return (
              _.call(this, e),
              void 0 !== this._keys || void 0 === this._coll
                ? (void 0 === this._result && (this._result = {}), (this._iterate = i))
                : (void 0 === this._result && (this._result = []), (this._iterate = r)),
              this
            );
          }
          function r() {
            const e = this._index++;
            a(o(this._iterator, this._result, this._coll[e], e), this, e);
          }
          function i() {
            const e = this._index++,
              t = this._keys[e];
            a(o(this._iterator, this._result, this._coll[t], t), this, e);
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: _ } = e('./internal/collection'),
            { call3: o, callProxyReciever: a, clone: c } = e('./internal/util');
          class n extends s {
            constructor(e, t, r) {
              super(e, t, l), r !== void 0 && (this._result = r);
            }
            _callResolve(e) {
              !1 === e
                ? this._promise._resolve(c(this._result))
                : 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
          }
          t.exports = {
            transformSeries: function(e, t, l) {
              return new n(e, t, l)._execute();
            },
            TransformSeries: n
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      77: [
        function(e, t) {
          'use strict';
          const { AigleWhilst: l, WhilstTester: r } = e('./whilst');
          class i extends r {
            constructor(e) {
              super(e);
            }
            _callResolve(e) {
              e ? this._proxy._promise._resolve(this._value) : this._proxy._next(this._value);
            }
          }
          t.exports = {
            until: function(e, t, r) {
              return 'function' != typeof r && ((r = t), (t = e), (e = void 0)), new l(new i(t), r)._iterate(e);
            },
            UntilTester: i
          };
        },
        { './whilst': 79 }
      ],
      78: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            { INTERNAL: i, apply: s, call1: _, callProxyReciever: o } = e('./internal/util'),
            a = {};
          class c {
            constructor(e, t) {
              (this._promise = e), (this._handler = t);
            }
            _dispose() {
              const { _promise: e } = this;
              switch (e._resolved) {
                case 0:
                  return e.then(() => this._dispose());
                case 1:
                  return _(this._handler, this._promise._value);
              }
            }
          }
          class n extends l {
            constructor(e, t) {
              super();
              const l = e.length;
              (this._promise = new r(i)),
                (this._rest = l),
                (this._disposed = l),
                (this._array = e),
                (this._error = void 0),
                (this._result = Array(l)),
                (this._handler = t);
              for (let r = -1; ++r < l; ) {
                const t = e[r];
                !1 == t instanceof c ? o(t, this, r) : o(t._promise, this, r);
              }
            }
            _spread() {
              const { _handler: e, _result: t } = this;
              return 'function' == typeof e ? void o(s(e, t), this, i) : this._callResolve(void 0, i);
            }
            _release() {
              const { _array: e } = this;
              for (let t = e.length; t--; ) {
                const l = e[t];
                !1 == l instanceof c ? this._callResolve(l, a) : o(l._dispose(), this, a);
              }
            }
            _callResolve(e, t) {
              return t === i
                ? ((this._result = e), this._release())
                : t === a
                  ? void (
                      0 == --this._disposed &&
                      (this._error ? this._promise._reject(this._error) : this._promise._resolve(this._result))
                    )
                  : void ((this._result[t] = e), 0 == --this._rest && this._spread());
            }
            _callReject(e) {
              return this._error ? this._promise._reject(e) : void ((this._error = e), this._release());
            }
          }
          t.exports = {
            using: function() {
              let e = arguments.length;
              const t = arguments[--e],
                l = Array(e);
              for (; e--; ) l[e] = arguments[e];
              return new n(l, t)._promise;
            },
            Disposer: c
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      79: [
        function(e, t) {
          'use strict';
          const { AigleProxy: l } = e('aigle-core'),
            r = e('./aigle'),
            { INTERNAL: i, callProxyReciever: s, call1: _ } = e('./internal/util');
          class o extends l {
            constructor(e) {
              super(), (this._tester = e), (this._proxy = void 0), (this._value = void 0);
            }
            _test(e) {
              (this._value = e), s(_(this._tester, e), this, void 0);
            }
            _callResolve(e) {
              e ? this._proxy._next(this._value) : this._proxy._promise._resolve(this._value);
            }
            _callReject(e) {
              this._proxy._callReject(e);
            }
          }
          class a extends l {
            constructor(e, t) {
              super(), (this._promise = new r(i)), (this._tester = e), (this._iterator = t), (e._proxy = this);
            }
            _iterate(e) {
              return this._callResolve(e), this._promise;
            }
            _next(e) {
              s(_(this._iterator, e), this, void 0);
            }
            _callResolve(e) {
              this._tester._test(e);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            whilst: function(e, t, l) {
              return 'function' != typeof l && ((l = t), (t = e), (e = void 0)), new a(new o(t), l)._iterate(e);
            },
            AigleWhilst: a,
            WhilstTester: o
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 80 }
      ],
      80: [
        function(e, t) {
          'use strict';
          t.exports = {
            AigleCore: class {
              constructor() {}
            },
            AigleProxy: class {
              constructor() {}
            }
          };
        },
        {}
      ],
      81: [
        function(e, t) {
          function l() {
            throw new Error('setTimeout has not been defined');
          }
          function r() {
            throw new Error('clearTimeout has not been defined');
          }
          function s(e) {
            if (n === setTimeout) return setTimeout(e, 0);
            if ((n === l || !n) && setTimeout) return (n = setTimeout), setTimeout(e, 0);
            try {
              return n(e, 0);
            } catch (t) {
              try {
                return n.call(null, e, 0);
              } catch (t) {
                return n.call(this, e, 0);
              }
            }
          }
          function i(e) {
            if (u === clearTimeout) return clearTimeout(e);
            if ((u === r || !u) && clearTimeout) return (u = clearTimeout), clearTimeout(e);
            try {
              return u(e);
            } catch (t) {
              try {
                return u.call(null, e);
              } catch (t) {
                return u.call(this, e);
              }
            }
          }
          function _() {
            y && p && ((y = !1), p.length ? (d = p.concat(d)) : (v = -1), d.length && o());
          }
          function o() {
            if (!y) {
              var e = s(_);
              y = !0;
              for (var t = d.length; t; ) {
                for (p = d, d = []; ++v < t; ) p && p[v].run();
                (v = -1), (t = d.length);
              }
              (p = null), (y = !1), i(e);
            }
          }
          function a(e, t) {
            (this.fun = e), (this.array = t);
          }
          function c() {}
          var n,
            u,
            m = (t.exports = {});
          (function() {
            try {
              n = 'function' == typeof setTimeout ? setTimeout : l;
            } catch (t) {
              n = l;
            }
            try {
              u = 'function' == typeof clearTimeout ? clearTimeout : r;
            } catch (t) {
              u = r;
            }
          })();
          var p,
            d = [],
            y = !1,
            v = -1;
          (m.nextTick = function(e) {
            var t = Array(arguments.length - 1);
            if (1 < arguments.length) for (var l = 1; l < arguments.length; l++) t[l - 1] = arguments[l];
            d.push(new a(e, t)), 1 !== d.length || y || s(o);
          }),
            (a.prototype.run = function() {
              this.fun.apply(null, this.array);
            }),
            (m.title = 'browser'),
            (m.browser = !0),
            (m.env = {}),
            (m.argv = []),
            (m.version = ''),
            (m.versions = {}),
            (m.on = c),
            (m.addListener = c),
            (m.once = c),
            (m.off = c),
            (m.removeListener = c),
            (m.removeAllListeners = c),
            (m.emit = c),
            (m.prependListener = c),
            (m.prependOnceListener = c),
            (m.listeners = function() {
              return [];
            }),
            (m.binding = function() {
              throw new Error('process.binding is not supported');
            }),
            (m.cwd = function() {
              return '/';
            }),
            (m.chdir = function() {
              throw new Error('process.chdir is not supported');
            }),
            (m.umask = function() {
              return 0;
            });
        },
        {}
      ],
      82: [
        function(e) {
          (function(e, t) {
            (function(t) {
              'use strict';
              function l(e) {
                'function' != typeof e && (e = new Function('' + e));
                for (var t = Array(arguments.length - 1), l = 0; l < t.length; l++) t[l] = arguments[l + 1];
                var r = { callback: e, args: t };
                return (d[p] = r), m(p), p++;
              }
              function r(e) {
                delete d[e];
              }
              function i(e) {
                var t = e.callback,
                  l = e.args;
                switch (l.length) {
                  case 0:
                    t();
                    break;
                  case 1:
                    t(l[0]);
                    break;
                  case 2:
                    t(l[0], l[1]);
                    break;
                  case 3:
                    t(l[0], l[1], l[2]);
                    break;
                  default:
                    t.apply(void 0, l);
                }
              }
              function s(e) {
                if (y) setTimeout(s, 0, e);
                else {
                  var t = d[e];
                  if (t) {
                    y = !0;
                    try {
                      i(t);
                    } finally {
                      r(e), (y = !1);
                    }
                  }
                }
              }
              function _() {
                m = function(t) {
                  e.nextTick(function() {
                    s(t);
                  });
                };
              }
              function o() {
                if (t.postMessage && !t.importScripts) {
                  var e = !0,
                    l = t.onmessage;
                  return (
                    (t.onmessage = function() {
                      e = !1;
                    }),
                    t.postMessage('', '*'),
                    (t.onmessage = l),
                    e
                  );
                }
              }
              function a() {
                var e = 'setImmediate$' + Math.random() + '$',
                  l = function(l) {
                    l.source === t &&
                      'string' == typeof l.data &&
                      0 === l.data.indexOf(e) &&
                      s(+l.data.slice(e.length));
                  };
                t.addEventListener ? t.addEventListener('message', l, !1) : t.attachEvent('onmessage', l),
                  (m = function(l) {
                    t.postMessage(e + l, '*');
                  });
              }
              function c() {
                var e = new MessageChannel();
                (e.port1.onmessage = function(e) {
                  var t = e.data;
                  s(t);
                }),
                  (m = function(t) {
                    e.port2.postMessage(t);
                  });
              }
              function n() {
                var e = v.documentElement;
                m = function(t) {
                  var l = v.createElement('script');
                  (l.onreadystatechange = function() {
                    s(t), (l.onreadystatechange = null), e.removeChild(l), (l = null);
                  }),
                    e.appendChild(l);
                };
              }
              function u() {
                m = function(e) {
                  setTimeout(s, 0, e);
                };
              }
              if (!t.setImmediate) {
                var m,
                  p = 1,
                  d = {},
                  y = !1,
                  v = t.document,
                  h = Object.getPrototypeOf && Object.getPrototypeOf(t);
                (h = h && h.setTimeout ? h : t),
                  '[object process]' === {}.toString.call(t.process)
                    ? _()
                    : o()
                      ? a()
                      : t.MessageChannel ? c() : v && 'onreadystatechange' in v.createElement('script') ? n() : u(),
                  (h.setImmediate = l),
                  (h.clearImmediate = r);
              }
            })('undefined' == typeof self ? ('undefined' == typeof t ? this : t) : self);
          }.call(
            this,
            e('_process'),
            'undefined' == typeof global
              ? 'undefined' == typeof self ? ('undefined' == typeof window ? {} : window) : self
              : global
          ));
        },
        { _process: 81 }
      ],
      83: [
        function(e, t) {
          t.exports = {
            name: 'aigle',
            version: '1.12.0-alpha.5',
            description: 'Aigle is an ideal Promise library, faster and more functional than other Promise libraries',
            main: 'index.js',
            typings: 'aigle.d.ts',
            private: !0,
            browser: 'browser.js',
            scripts: {
              bench: 'node --expose_gc ./benchmark -d',
              eslint: 'eslint . --ext .js',
              test: 'DELAY=50 npm-run-all -p eslint test:type test:cov',
              'test:mocha': 'mocha test/**/*.js',
              'test:cov': 'nyc npm run test:mocha',
              'test:type': 'cd typings && tsc',
              codecov: 'nyc report --reporter=lcovonly && codecov',
              prettier:
                "prettier --write './benchmark/**/*.js' './gulp/**/*.js' './lib/**/*.js' './test/**/*.js' './typings/**/*.ts'",
              precommit: 'lint-staged'
            },
            homepage: 'https://github.com/suguru03/aigle',
            keywords: ['aigle', 'promise', 'async'],
            files: ['README.md', 'index.js', 'lib/', 'browser.js', 'dist/'],
            author: 'Suguru Motegi',
            license: 'MIT',
            devDependencies: {
              babili: '0.1.4',
              benchmark: '^2.1.1',
              bluebird: '^3.5.1',
              browserify: '^16.0.0',
              buble: '^0.19.0',
              codecov: '^3.0.0',
              docdash: '^0.4.0',
              eslint: '^4.19.1',
              'fs-extra': '^4.0.2',
              gulp: '^3.9.1',
              'gulp-bump': '^3.0.0',
              'gulp-git': '^2.4.2',
              'gulp-tag-version': '^1.3.0',
              husky: '^0.14.3',
              jsdoc: '^3.5.5',
              'lint-staged': '^7.0.0',
              lodash: '^4.15.0',
              minimist: '^1.2.0',
              mocha: '^5.0.0',
              'mocha.parallel': '0.15.5',
              'neo-async': '^2.5.0',
              'npm-run-all': '^4.1.2',
              nyc: '^11.4.1',
              prettier: '^1.11.1',
              'require-dir': '^1.0.0',
              'run-sequence': '^2.0.0',
              semver: '^5.5.0',
              setimmediate: '^1.0.5',
              tslint: '^5.9.1',
              typescript: '^2.7.2',
              'uglify-js': '^3.1.5'
            },
            dependencies: { 'aigle-core': '^1.0.0' },
            'lint-staged': { '*.{js,ts}': ['prettier --write', 'git add'] },
            prettier: { printWidth: 120, singleQuote: !0 }
          };
        },
        {}
      ]
    },
    {},
    [1]
  )(1);
});
